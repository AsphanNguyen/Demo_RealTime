@model IEnumerable<realtime2.Models.Product>

@{
    ViewData["Title"] = "Product";
}

<h1>Product</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Stock)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td id="quantity-@item.Id">
                @Html.DisplayFor(modelItem => item.Stock)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new {  id=item.Id }) |
                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
        </tr>
}
    </tbody>
</table>

<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/myhub").build();

    connection.on("ReceiveQuantityUpdate", (ProductID, newQuantity) => {
        const quantityElement = document.getElementById(`quantity-${ProductID}`);
        if (quantityElement) {
            quantityElement.textContent = newQuantity;
        }
    });

    connection.start().catch(err => console.error(err));

</script>